/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <6 18 30 39 40 7 8 9 10 11 19 20 21 22 23 31 32 33 34 35 41>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        Copy {
            bindings = <&kp LC(INSERT)>;
            key-positions = <3 2 4>;
            layers = <0>;
        };

        Paste {
            bindings = <&kp LS(INS)>;
            key-positions = <14 15 16>;
            layers = <0>;
        };

        Cut {
            bindings = <&kp LS(DELETE)>;
            key-positions = <26 28 27>;
            layers = <0>;
        };

        prog-parenthesis {
            bindings = <&par>;
            key-positions = <7 8>;
            layers = <0>;
        };

        prog-braces {
            bindings = <&brackets>;
            key-positions = <20 19>;
            layers = <0>;
        };

        prog-less {
            bindings = <&kp LT>;
            key-positions = <32 19>;
            layers = <0>;
        };

        prog-return {
            bindings = <&kp COLON>;
            key-positions = <19 21 20>;
            layers = <0>;
        };

        prog-equals {
            bindings = <&kp EQUAL>;
            key-positions = <7 8 9>;
            layers = <0>;
        };

        enie {
            bindings = <&kp RA(N)>;
            key-positions = <36 19>;
            layers = <0>;
        };

        enie-mac {
            bindings = <&enie_mac>;
            key-positions = <36 12 19>;
            layers = <0>;
        };

        huh {
            bindings = <&kp QUESTION>;
            key-positions = <14 15 4>;
        };

        chin {
            bindings = <&kp EXCLAMATION>;
            key-positions = <25 26 3>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <19 18>;
        };

        under {
            bindings = <&kp UNDER>;
            key-positions = <31 30>;
        };

        prog-bracket {
            bindings = <&kp LBKT>;
            key-positions = <8 19>;
        };
    };

    macros {
        par: WIN_DESK_LEFT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "WIN_DESK_LEFT";
        };

        brackets: WIN_DESK_RIGHT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "WIN_DESK_RIGHT";
        };

        cut: cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(DEL)>;
            label = "CUT";
        };

        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(INS)>;
            label = "COPY";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(INS)>;
            label = "PASTE";
        };

        enie_mac: enie_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(N) &kp N &kp N>;
            label = "ENIE_MAC";
        };

        left_word: left_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT)>;
            label = "LEFT_WORD";
        };

        right_word: right_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT)>;
            label = "RIGHT_WORD";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha {
            display-name = "ALPHA";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp W             &kp L        &kp Y                &kp P              &kp B        &kp F        &kp J               &kp O                 &kp U             &kp SEMICOLON     &kp ESCAPE
&kp LCTRL  &hml LEFT_META C  &hml LALT R  &hml LEFT_CONTROL S  &hml LEFT_SHIFT T  &kp G        &kp M        &hmr RIGHT_SHIFT N  &hmr RIGHT_CONTROL E  &hmr RIGHT_ALT I  &hmr RIGHT_GUI A  &kp SQT
&kp LSHFT  &kp Q             &kp Z        &kp V                &kp D              &kp K        &kp X        &kp H               &kp COMMA             &kp DOT           &kp FSLH          &key_repeat
                                          &lt 3 LEFT_ALT       &mo 1              &kp SPACE    &lt 5 ENTER  &lt 4 BACKSPACE     &lt 2 LEFT_GUI
            >;
        };

        nav {
            display-name = "NAV";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &trans        &trans        &trans        &trans          &trans          &trans   &left_word      &kp UP    &right_word  &kp PAGE_UP    &kp DELETE
&kp CAPS    &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL     &kp LEFT_SHIFT  &trans          &trans   &kp LEFT_ARROW  &kp DOWN  &kp RIGHT    &kp INS        &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3    &bt BT_SEL 4    &trans   &copy           &cut      &paste       &kp PAGE_DOWN  &trans
                                        &trans        &trans          &kp SPACE       &kp RET  &trans          &trans
            >;
        };

        media {
            display-name = "MEDIA";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &kp C_PREV         &kp C_MUTE        &kp C_NEXT       &trans       &trans  &trans          &trans            &trans        &trans        &trans
&trans  &trans  &kp C_VOLUME_DOWN  &kp C_PLAY_PAUSE  &kp C_VOLUME_UP  &trans       &trans  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &trans
&trans  &trans  &trans             &trans            &trans           &trans       &trans  &trans          &trans            &trans        &trans        &trans
                                   &trans            &trans           &kp SPACE    &trans  &trans          &trans
            >;
        };

        num {
            display-name = "NUMBERS";
            bindings = <
&kp TAB    &kp LEFT_BRACE  &kp N7        &kp N8        &kp N9        &kp RIGHT_BRACE    &trans     &kp N7        &kp N8        &kp N9        &trans  &trans
&kp LCTRL  &kp SEMICOLON   &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp EQUAL          &kp GRAVE  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &trans  &trans
&kp LSHFT  &kp GRAVE       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp BACKSLASH      &trans     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans
                                         &kp N0        &trans        &trans             &trans     &trans        &kp N0
            >;
        };

        sym {
            display-name = "SYMBOLS";
            bindings = <
&trans  &kp TILDE  &kp DOLLAR     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PERCENT     &trans    &kp DOUBLE_QUOTES  &kp LESS_THAN  &kp GREATER_THAN  &kp GRAVE        &trans
&trans  &kp UNDER  &kp COLON      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp QUESTION    &kp HASH  &kp EQUAL          &kp MINUS      &kp PLUS          &kp EXCLAMATION  &trans
&trans  &trans     &kp AMPERSAND  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp AT_SIGN     &trans    &kp SLASH          &kp ASTERISK   &kp BACKSLASH     &kp CARET        &trans
                                  &trans                &trans                 &trans          &trans    &trans             &trans
            >;
        };

        fun {
            display-name = "FUNCTION";
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &trans    &trans  &trans          &trans     &trans        &trans        &ext_power EP_TOG
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &trans    &trans  &kp LEFT_SHIFT  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &trans    &trans  &trans          &trans     &trans        &trans        &trans
                         &trans  &trans  &trans    &trans  &trans          &trans
            >;
        };
    };
};